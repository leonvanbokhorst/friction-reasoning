# Friction Reasoning Data Generator Project Rules

# Project Structure
structure:
  src/friction_reasoning/:
    - agents/      # Reasoning agents implementation
    - core/        # Core functionality and interfaces
    - utils/       # Utility functions and helpers
    - llm/         # LiteLLM integration and prompts
    - dataset/     # Dataset generation and HuggingFace upload
  tests/:          # Test files matching src structure
  docs/:           # Documentation files

# Dependencies
dependencies:
  core:
    - litellm>=1.0.0        # LLM interface
    - huggingface_hub>=0.20.0  # Dataset storage
    - datasets>=2.10.0      # Dataset handling
    - pydantic>=2.0.0       # Data validation
  dev:
    - pytest>=7.0.0         # Testing
    - black>=22.0.0         # Code formatting
    - mypy>=1.0.0           # Type checking
    - pylint>=2.17.0        # Linting

# Code Quality
quality:
  formatting:
    tool: black
    line_length: 88
    target_version: py38
  
  type_checking:
    tool: mypy
    strict: true
    ignore_missing_imports: true
    
  linting:
    tool: pylint
    max_line_length: 88
    disable:
      - C0111  # Missing docstring (handled by type hints)
      - R0903  # Too few public methods
    
  testing:
    tool: pytest
    coverage:
      min_percentage: 90
      exclude:
        - tests/*
        - setup.py

# Documentation
documentation:
  style: google
  required_sections:
    - Args
    - Returns
    - Raises (if applicable)
    - Examples (for public APIs)

# Git
git:
  branch_prefix:
    feature: feat/
    bugfix: fix/
    docs: docs/
  commit_style: conventional
  protected_branches:
    - main
    - dev

# Tech Stack
tech_stack:
  language:
    name: Python
    version: ">=3.8"
  
  llm:
    provider: litellm
    models:
      - ollama/llama3.2
    ollama:
      verification:
        - pre_check: true  # Always verify Ollama models before use
        - command: "ollama list"
        - parse_output:
            columns: ["NAME", "ID", "SIZE", "MODIFIED"]
            extract: ["NAME", "MODIFIED"]  # Extract these for version checking
        - validate:
            - type: "exists"  # Check if model exists
              error: "Model {model} not found in Ollama. Please pull it using 'ollama pull {model}'"
            - type: "version"  # Check if model is latest
              field: "MODIFIED"
              warning: "Model {model} was last modified {modified_time}. Consider updating with 'ollama pull {model}'"
      api:
        base_url: "http://localhost:11434"
        timeout: 120
        verify_ssl: false
        retry:
          max_attempts: 3
          initial_delay: 1
    
  dataset:
    storage: huggingface_hub
    format: jsonl
    schema:
      - user_input: str
      - agents: List[Dict]
      - metadata: Dict
    
  testing:
    framework: pytest
    types:
      - unit
      - integration
      - agent_behavior

# Environment Variables
env_vars:
  required:
    - OPENAI_API_KEY
    - ANTHROPIC_API_KEY
    - HUGGINGFACE_TOKEN
  optional:
    - LOG_LEVEL
    - ENVIRONMENT

# CI/CD
ci_cd:
  pre_commit:
    - black
    - mypy
    - pylint
    - pytest
  
  github_actions:
    triggers:
      - pull_request
      - push:
          branches: [main, dev]
    steps:
      - lint
      - type-check
      - test
      - build
      - publish-dataset 